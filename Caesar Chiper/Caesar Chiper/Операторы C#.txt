Операторы C#
Visual Studio 2015

Самая актуальная документация по версии-кандидату Visual Studio 2017: Документация по версии-кандидату Visual Studio 2017.

C# предоставляет множество операторов, которые являются символами, указывающими, какие операции (математические операции, индексирование, вызов функции и т. д.) следует выполнять в выражении. Вы можете перегрузить многие операторы, чтобы изменить их значение при применении к определяемому пользователем типу.

Операции с целыми типами (такие как ==, !=, <, >, &, | ) обычно разрешены для типов перечисления (enum).

В данных разделах перечислены операторы C# в порядке убывания приоритета. Операторы в каждом разделе совместно используют один и тот же уровень приоритета.
Основные операторы

Это операторы с наивысшим приоритетом. Обратите внимание, что можно щелкнуть операторы для перехода на страницы с подробным описанием и примерами.

x.y — доступ к членам.

x?.y — доступ к членам, определяемый условием NULL. Возвращает значение NULL, если левый операнд имеет значение NULL.

f(x) — вызов функции.

[x] — индексирование агрегатного объекта.

a?[x] — индексирование, определяемое условием NULL. Возвращает значение NULL, если левый операнд имеет значение NULL.

x++ — постфиксный инкремент. Возвращает значение x и затем обновляет расположение хранения значением x, которое увеличено на единицу (обычно добавляется целочисленное значение 1).

x-- — постфиксный декремент. Возвращает значение x и затем обновляет расположение хранения значением x, которое уменьшено на единицу (обычно вычитается целочисленное значение 1).

New — тип создания экземпляра.

Typeof — возвращает объект System.Type, представляющий операнд.

Checked — позволяет проверять переполнение при выполнении операций с целыми числами.

Unchecked — запрещает проверять переполнение при выполнении операций с целыми числами. Это поведение установлено для компилятора по умолчанию.

default(T) — возвращает инициализированное значение по умолчанию типа T, значение NULL для ссылочных типов, ноль для числовых типов и члены, заполненные нулями/значениями NULL, для типов структуры.

Delegate — объявляет и возвращает экземпляр делегата.

Sizeof — возвращает размер в байтах операнда тип.

-> — разыменование указателя в сочетании с доступом к члену.
Унарные операторы

Эти операторы имеют более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть операторы для перехода на страницы с подробным описанием и примерами.

+x — возвращает значение x.

-x — числовое отрицание.

!x — логическое отрицание.

~x — поразрядное дополнение.

++x — префиксный инкремент. Возвращает значение x после обновления расположения хранения значением x, которое увеличено на единицу (обычно добавляется целочисленное значение 1).

--x — префиксный декремент. Возвращает значение x после обновления расположения хранения значением x, которое уменьшено на единицу (обычно вычитается целочисленное значение 1).

(T)x — приведение типов.

Await — ожидает Task.

&x — адрес.

*x — разыменование.
Мультипликативные операторы

Эти операторы имеют более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть операторы для перехода на страницы с подробным описанием и примерами.

x * y — умножение.

x / y — деление. Если операнды имеют целые числа, результатом является целочисленное значение, усеченное в сторону нуля (например, -7 / 2 is -3).

x % y — получение модуля. Если операнды имеют целые числа, это возвращает остаток от деления x на y. Если q = x / y и r = x % y, то x = q * y + r.
Операторы сложения

Эти операторы имеют более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть операторы для перехода на страницы с подробным описанием и примерами.

x + y — сложение.

x – y — вычитание.
Операторы сдвига

Эти операторы имеют более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть операторы для перехода на страницы с подробным описанием и примерами.

x << y — сдвиг битов влево и заполнение правой части нулем.

x >> y — сдвиг битов вправо . Если левым операндом является int или long, затем левые биты заполняются битом знака. Если левым операндом является uint или ulong, затем левые биты заполняются нулем.
Относительные операторы и операторы тестирования типа

Эти операторы имеют более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть операторы для перехода на страницы с подробным описанием и примерами.

x < y — меньше чем (значение true, если x меньше y).

x > y — больше чем (значение true, если x больше y).

x <= y — меньше или равно.

x >= y — больше или равно.

Is — совместимость типов. Возвращает значение true, если вычисленный левый операнд может быть приведен к типу, указанному в правом операнде (статический тип).

As — преобразование типов. Возвращает левый операнд, приведенный к типу, заданному правым операндом (статический тип), но as возвращает null, где (T)x вызывает исключение.
Операторы равенства

Эти операторы имеют более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть операторы для перехода на страницы с подробным описанием и примерами.

x == y — равенство. По умолчанию для ссылочных типов, отличных от string, этот оператор возвращает равенство ссылок (проверка удостоверения). Однако типы могут перегрузить ==, поэтому если планируется проверять удостоверения, лучше использовать метод ReferenceEquals для object.

x != y — неравенство. См. примечание для ==. Если тип перегружает ==, то его необходимо перегрузить !=.
Оператор логического И

Этот оператор имеет более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть оператор для перехода на страницу с подробным описанием и примерами.

x & y — логические или битовые операторы И. В общем случае разрешено использовать с целочисленными типами и типами enum.
Оператор логического исключающего ИЛИ

Этот оператор имеет более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть оператор для перехода на страницу с подробным описанием и примерами.

x ^ y — логические или битовые операторы исключающего ИЛИ. Обычно их можно использовать с целочисленными типами и типами enum.
Оператор логического ИЛИ

Этот оператор имеет более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть оператор для перехода на страницу с подробным описанием и примерами.

x | y — логические или битовые операторы ИЛИ. В общем случае разрешено использовать с целочисленными типами и типами enum.
Условный оператор И

Этот оператор имеет более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть оператор для перехода на страницу с подробным описанием и примерами.

x && y — логическое И. Если первый операнд имеет значение false, то C# не вычисляет второй операнд.
Условный оператор ИЛИ

Этот оператор имеет более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть оператор для перехода на страницу с подробным описанием и примерами.

x || y — логическое ИЛИ. Если первый операнд имеет значение true, то C# не вычисляет второй операнд.
Оператор объединения с NULL

Этот оператор имеет более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть оператор для перехода на страницу с подробным описанием и примерами.

x?? y — возвращает x, если значение отличается от null; в противном случае возвращает y.
Условный оператор

Этот оператор имеет более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть оператор для перехода на страницу с подробным описанием и примерами.

t ? x : y — если тест t имеет значение true, вычисляет и возвращает x, в противном случае вычисляет и возвращает y.
Назначение и лямбда-операторы

Эти операторы имеют более высокий приоритет по сравнению со следующим разделом и более низкий приоритет по сравнению с предыдущим. Обратите внимание, что можно щелкнуть операторы для перехода на страницы с подробным описанием и примерами.

x = y — назначение.

x += y — инкремент. Добавьте значение y к значению x, сохраните результат в x и возвратите новое значение. Если x назначает event, то y должен быть соответствующей функцией, которую C# добавляет в качестве обработчика событий.

x -= y — декремент. Вычтите значение y из значения x, сохраните результат в x и возвратите новое значение. Если x назначает event, то y должен быть соответствующей функцией, которую C# удаляет в качестве обработчика событий.

x *= y — назначение умножения. Умножьте значение y на значение x, сохраните результат в x и возвратите новое значение.

x /= y — назначение деления. Разделите значение x на значение y, сохраните результат в x и возвратите новое значение.

x %= y — назначение модуля. Разделите значение x на значение y, сохраните остаток в x и возвратите новое значение.

x &= y — назначение И. Выполните операцию И для значения y и значения x, сохраните результат в x и возвратите новое значение.

x |= y — назначение ИЛИ. Выполните операцию ИЛИ для значения y и значения x, сохраните результат в x и возвратите новое значение.

x ^= y — назначение исключающего ИЛИ. Выполните операцию исключающего ИЛИ для значения y и значения x, сохраните результат в x и возвратите новое значение.

x <<= y — назначение сдвига влево. Сдвиньте значение x влево на y позиций, сохраните результат в x и возвратите новое значение.

x >>= y — назначение сдвига вправо. Сдвиньте значение x вправо на y позиций, сохраните результат в x и возвратите новое значение.

=> — объявление лямбда-выражения.
Переполнение при арифметической операции

Арифметические операторы (+, -, *, /) могут давать результаты, которые находятся за пределами диапазона возможных значений для используемого числового типа. Подробнее см. в разделе, посвященном конкретному оператору, однако в общем случае применяются следующие правила.

    Переполнение при целочисленных арифметических операциях либо вызывает исключение OverflowException или отбрасывает старшие биты результата. Деление целого числа на ноль всегда вызывает исключение DivideByZeroException.

    Переполнение или деление на ноль при арифметических операциях с плавающей запятой никогда не вызывает исключение, так как типы с плавающей запятой — а поэтому и правила для представления бесконечности и значения NaN (не число) — основаны на стандарте IEEE 754.

    Переполнение при десятичной арифметической операции всегда вызывает исключение OverflowException. Деление десятичного числа на ноль всегда вызывает исключение DivideByZeroException.

Что именно произойдет при возникновении переполнения для целочисленного значения, зависит от контекста выполнения, который может быть проверяемым и непроверяемым. В проверяемом контексте возникает исключение OverflowException. В непроверяемом контексте старшие биты результата отбрасываются и выполнение продолжается. Таким образом, C# позволяет сделать выбор между обработкой и игнорированием переполнения.

Кроме арифметических операторов, переполнение могут вызвать приведения целочисленного типа к целочисленному типу, например приведение long к int, для которых возможно проверяемое и непроверяемое выполнение. Однако битовые операторы и операторы сдвига никогда не вызывают переполнение.